#!/usr/bin/env node
import{Command as K}from"commander";import{select as G,input as S}from"@inquirer/prompts";import F from"path";import{fileURLToPath as W}from"url";import g from"fs/promises";import u from"path";import{parse as V}from"yaml";import E from"mustache";E.escape=r=>r;var j=class{constructor(e){this.templatesPath=e}async getTemplateConfig(e,t){let a=u.join(this.templatesPath,e,t),i=u.join(a,"template.yaml");try{let n=await g.readFile(i,"utf-8");return V(n)}catch(n){throw new Error(`Failed to load template config for ${e}/${t}: ${n}`)}}getTemplatePath(e,t){return u.join(this.templatesPath,e,t,"files")}async listAvailableTemplates(){let e=await g.readdir(this.templatesPath);return(await Promise.all(e.map(async a=>{let i=u.join(this.templatesPath,a);if(!(await g.stat(i)).isDirectory())return null;let s=await g.readdir(i),f=await Promise.all(s.map(async o=>{let l=u.join(i,o,"template.yaml");try{return await g.access(l),o}catch{return null}}));return{language:a,types:f.filter(o=>o!==null)}}))).filter(a=>a!==null)}async processTemplate(e,t,a){await g.mkdir(t,{recursive:!0});let i=await g.readdir(e,{withFileTypes:!0});for(let n of i){let s=u.join(e,n.name),f=E.render(n.name,a),o=u.join(t,f);if(n.isDirectory())await this.processTemplate(s,o,a);else{let l=await g.readFile(s,"utf-8");l=l.replace(/\{\{\s*\.module_path\s*\}\}/g,"{{module_path}}");let h=E.render(l,a);await g.writeFile(o,h)}}}};import{exec as z}from"child_process";import{promisify as D}from"util";import k from"chalk";function p(){return{info:(r,...e)=>{console.info(r,...e)},error:(r,e)=>{console.error(k.red(r),e instanceof Error?e.message:e)},success:r=>{console.info(k.green("\u2713"),r)},warn:r=>{console.warn(k.yellow("\u26A0"),r)}}}var x=D(z),I=p(),b=class{name="go";async validateEnvironment(){try{return await x("go version"),!0}catch{return I.error("Go is not installed or not in PATH",""),!1}}async initialize(e,t){let a=t.module_path||t.project_name;await x(`go mod init ${a}`,{cwd:e})}async installDependencies(e){await x("go mod tidy",{cwd:e})}async setupTests(e){await x("mkdir -p internal",{cwd:e})}};import{exec as J}from"child_process";import{promisify as N}from"util";import w from"fs/promises";import d from"path";var y=N(J),m=p(),C=class{name="java";async validateEnvironment(){try{let{stderr:e}=await y("java -version");m.info("Found Java:",e.split(`
`)[0]);let{stdout:t}=await y("gradle --version"),a=t.split(`
`).find(i=>i.includes("Gradle"));return a&&m.info("Found Gradle:",a.trim()),!0}catch(e){if(e instanceof Error){let t=e.message.toLowerCase();t.includes("java")?m.error("Java is not installed or not in PATH",""):t.includes("gradle")&&m.error("Gradle is not installed or not in PATH","")}return!1}}async initialize(e,t){let a=t.package_name.replace(/\./g,"/"),i=d.join(e,"src","main","java",a),n=d.join(e,"src","test","java",a);await w.mkdir(i,{recursive:!0}),await w.mkdir(n,{recursive:!0});try{let s=d.join(e,"src","main","java"),f=await w.readdir(s);for(let o of f)if(o.endsWith(".java")){let l=d.join(s,o),h=d.join(i,o);await w.rename(l,h)}}catch(s){m.error("Error moving Java files to package directory:",s)}try{await y("gradle --version"),m.info("Using system Gradle installation")}catch{m.info("Gradle not found, downloading wrapper..."),await this.downloadGradleWrapper(e)}}async downloadGradleWrapper(e){let t="8.5";try{await y(`gradle wrapper --gradle-version ${t} --distribution-type bin`,{cwd:e}),await w.chmod(d.join(e,"gradlew"),493)}catch{m.warn("Could not download Gradle wrapper automatically.");let i=`#!/bin/sh
echo "Please install Gradle ${t} or run 'gradle wrapper' to download the wrapper."
exit 1`;await w.writeFile(d.join(e,"gradlew"),i),await w.chmod(d.join(e,"gradlew"),493)}}async installDependencies(e){try{m.info("Building project and downloading dependencies...");try{await y("gradle build -x test",{cwd:e})}catch{await y("./gradlew build -x test",{cwd:e})}}catch(t){throw new Error(`Failed to build project: ${t}`)}}async setupTests(e){m.info("Test environment ready. Run ./gradlew test to execute tests.")}};var H={go:new b,java:new C};function _(r){return H[r]}import $ from"chalk";var c=p(),M=W(import.meta.url),O=F.dirname(M),U=F.resolve(O,"..");async function L(r){let e=F.join(U,"templates"),t=new j(e);try{let a=await t.listAvailableTemplates(),i=r.language||await B(a),n=a.find(A=>A.language===i);if(!n)throw new Error(`No templates available for language: ${i}`);let s=r.type||await Y(n.types);c.info("Loading template configuration...");let f=await t.getTemplateConfig(i,s),o=await q(f);c.info("Creating project...");let l=F.join(process.cwd(),o.project_name),h=t.getTemplatePath(i,s);await t.processTemplate(h,l,o);let v=_(i);if(!v)throw new Error(`No toolchain available for language: ${i}`);if(c.info("Validating environment..."),!await v.validateEnvironment())throw new Error(`Environment validation failed for ${i}`);c.info("Initializing project..."),await v.initialize(l,o),c.info("Installing dependencies..."),await v.installDependencies(l),c.info("Setting up tests..."),await v.setupTests(l),c.success("Project created successfully!"),c.info(`
Next steps:`),c.info($.cyan(`  cd ${o.project_name}`)),i==="go"&&(c.info($.cyan("  go mod tidy")),c.info($.cyan("  go run main.go")))}catch(a){c.error("Failed to initialize project:",a),process.exit(1)}}async function B(r){return G({message:"Select a language:",choices:r.map(e=>({value:e.language,label:e.language}))})}async function Y(r){return G({message:"Select a project type:",choices:r.map(e=>({value:e,label:e}))})}async function q(r){let e={};for(let t of r.variables){let a=await S({message:t.prompt,default:t.default,validate:t.validate?i=>typeof t.validate=="string"?new RegExp(t.validate).test(i)||`Input must match pattern: ${t.validate}`:!0:void 0});e[t.name]=a}return e}var Q=p(),R=new K().name("eden").description("Modern project scaffolding tool").version("0.1.0");R.command("init").description("Initialize a new project").option("-l, --language <language>","Target language").option("-t, --type <type>","Project type").action(async r=>{try{await L(r)}catch(e){Q.error("Failed to initialize project:",e),process.exit(1)}});R.parse();
//# sourceMappingURL=index.js.map