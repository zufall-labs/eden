#!/usr/bin/env node
import{Command as et}from"commander";import{select as G,input as M}from"@inquirer/prompts";import T from"path";import{fileURLToPath as q}from"url";import p from"fs/promises";import u from"path";import{parse as S}from"yaml";import $ from"mustache";$.escape=r=>r;var x=class{constructor(t){this.templatesPath=t}async getTemplateConfig(t,e){let i=u.join(this.templatesPath,t,e),a=u.join(i,"template.yaml");try{let s=await p.readFile(a,"utf-8");return S(s)}catch(s){throw new Error(`Failed to load template config for ${t}/${e}: ${s}`)}}getTemplatePath(t,e){return u.join(this.templatesPath,t,e,"files")}async listAvailableTemplates(){let t=await p.readdir(this.templatesPath);return(await Promise.all(t.map(async i=>{let a=u.join(this.templatesPath,i);if(!(await p.stat(a)).isDirectory())return null;let l=await p.readdir(a),f=await Promise.all(l.map(async n=>{let o=u.join(a,n,"template.yaml");try{return await p.access(o),n}catch{return null}}));return{language:i,types:f.filter(n=>n!==null)}}))).filter(i=>i!==null)}async processTemplate(t,e,i){await p.mkdir(e,{recursive:!0});let a=await p.readdir(t,{withFileTypes:!0});for(let s of a){let l=u.join(t,s.name),f=$.render(s.name,i),n=u.join(e,f);if(s.isDirectory())await this.processTemplate(l,n,i);else{let o=await p.readFile(l,"utf-8");o=o.replace(/\{\{\s*\.module_path\s*\}\}/g,"{{module_path}}");let j=$.render(o,i);await p.writeFile(n,j)}}}};import{exec as J}from"child_process";import{promisify as N}from"util";import L from"chalk";function g(){return{info:(r,...t)=>{console.info(r,...t)},error:(r,t)=>{console.error(L.red(r),t instanceof Error?t.message:t)},success:r=>{console.info(L.green("\u2713"),r)},warn:r=>{console.warn(L.yellow("\u26A0"),r)}}}var b=N(J),U=g(),C=class{name="go";async validateEnvironment(){try{return await b("go version"),!0}catch{return U.error("Go is not installed or not in PATH",""),!1}}async initialize(t,e){let i=e.module_path||e.project_name;await b(`go mod init ${i}`,{cwd:t})}async installDependencies(t){await b("go mod tidy",{cwd:t})}async setupTests(t){await b("mkdir -p internal",{cwd:t})}};import{exec as H}from"child_process";import{promisify as O}from"util";import w from"fs/promises";import d from"path";var y=O(H),m=g(),E=class{name="java";async validateEnvironment(){try{let{stderr:t}=await y("java -version");m.info("Found Java:",t.split(`
`)[0]);let{stdout:e}=await y("gradle --version"),i=e.split(`
`).find(a=>a.includes("Gradle"));return i&&m.info("Found Gradle:",i.trim()),!0}catch(t){if(t instanceof Error){let e=t.message.toLowerCase();e.includes("java")?m.error("Java is not installed or not in PATH",""):e.includes("gradle")&&m.error("Gradle is not installed or not in PATH","")}return!1}}async initialize(t,e){let i=e.package_name.replace(/\./g,"/"),a=d.join(t,"src","main","java",i),s=d.join(t,"src","test","java",i);await w.mkdir(a,{recursive:!0}),await w.mkdir(s,{recursive:!0});try{let l=d.join(t,"src","main","java"),f=await w.readdir(l);for(let n of f)if(n.endsWith(".java")){let o=d.join(l,n),j=d.join(a,n);await w.rename(o,j)}}catch(l){m.error("Error moving Java files to package directory:",l)}try{await y("gradle --version"),m.info("Using system Gradle installation")}catch{m.info("Gradle not found, downloading wrapper..."),await this.downloadGradleWrapper(t)}}async downloadGradleWrapper(t){let e="8.5";try{await y(`gradle wrapper --gradle-version ${e} --distribution-type bin`,{cwd:t}),await w.chmod(d.join(t,"gradlew"),493)}catch{m.warn("Could not download Gradle wrapper automatically.");let a=`#!/bin/sh
echo "Please install Gradle ${e} or run 'gradle wrapper' to download the wrapper."
exit 1`;await w.writeFile(d.join(t,"gradlew"),a),await w.chmod(d.join(t,"gradlew"),493)}}async installDependencies(t){try{m.info("Building project and downloading dependencies...");try{await y("gradle build -x test",{cwd:t})}catch{await y("./gradlew build -x test",{cwd:t})}}catch(e){throw new Error(`Failed to build project: ${e}`)}}async setupTests(t){m.info("Test environment ready. Run ./gradlew test to execute tests.")}};var W={go:new C,java:new E};function A(r){return W[r]}import k from"chalk";import R from"fs/promises";var c=g(),B=q(import.meta.url),Y=T.dirname(B),K=T.resolve(Y,"..");async function _(r){let t=T.join(K,"templates"),e=new x(t);try{let i=await e.listAvailableTemplates(),a=r.language||await Q(i);a=a.toLowerCase();let s=i.find(I=>I.language===a);if(!s)throw new Error(`No templates available for language: ${a}`);let l=r.type||await X(s.types);l=l.toLowerCase(),c.info("Loading template configuration...");let f=await e.getTemplateConfig(a,l),n=await Z(f),o=r.output?r.output==="."?process.cwd():T.resolve(r.output):T.join(process.cwd(),n.project_name);if(await tt(o))if(o===process.cwd())c.info("Using current directory");else throw new Error(`Directory ${o} already exists`);else await R.mkdir(o,{recursive:!0});let D=e.getTemplatePath(a,l);await e.processTemplate(D,o,n);let h=A(a);if(!h)throw new Error(`No toolchain available for language: ${a}`);if(c.info("Validating environment..."),!await h.validateEnvironment())throw new Error(`Environment validation failed for ${a}`);c.info("Initializing project..."),await h.initialize(o,n),c.info("Installing dependencies..."),await h.installDependencies(o),c.info("Setting up tests..."),await h.setupTests(o),c.success("Project created successfully!"),c.info(`
Next steps:`);let V=o.split("/").pop();r.output!=="."&&c.info(k.cyan(`  cd ${V}`)),a==="go"?(c.info(k.cyan("  go mod tidy")),c.info(k.cyan("  go run main.go"))):a==="java"&&c.info(k.cyan("  gradle quarkusDev"))}catch(i){c.error("Failed to initialize project:",i),process.exit(1)}}async function Q(r){return G({message:"Select a language:",choices:r.map(t=>({value:F(t.language),label:F(t.language)}))})}async function X(r){return G({message:"Select a project type:",choices:r.map(t=>({value:F(t),label:F(t)}))})}async function Z(r){let t={};for(let e of r.variables){let i=await M({message:e.prompt,default:e.default,validate:e.validate?a=>typeof e.validate=="string"?new RegExp(e.validate).test(a)||`Input must match pattern: ${e.validate}`:!0:void 0});t[e.name]=i}return t}async function tt(r){try{return(await R.stat(r)).isDirectory()}catch{return!1}}function F(r){return String(r).charAt(0).toUpperCase()+String(r).slice(1)}var rt=g(),z=new et().name("eden").description("Modern project scaffolding tool").version("0.1.0");z.command("init [output]").description('Initialize a new project in the specified directory or current directory with "."').option("-l, --language <language>","Target language").option("-t, --type <type>","Project type").action(async(r,t)=>{try{await _({...t,output:r})}catch(e){rt.error("Failed to initialize project:",e),process.exit(1)}});z.parse();
//# sourceMappingURL=index.js.map